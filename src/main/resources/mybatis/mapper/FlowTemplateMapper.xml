<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liwj.asem.dao.FlowTemplateMapper">
  <resultMap id="BaseResultMap" type="com.liwj.asem.model.FlowTemplate">
    <constructor>
      <idArg column="id" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="flow_type" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="create_user_id" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="create_date" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="modify_user_id" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="modify_date" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="version" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="primary_teaching_institution_id" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="need_grade_check" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="grade_instructor" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="grade_student" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="special_instructor" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="college_student" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="school_user" javaType="java.lang.Boolean" jdbcType="BIT" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, name, flow_type, create_user_id, create_date, modify_user_id, modify_date, version, 
    primary_teaching_institution_id, need_grade_check, grade_instructor, grade_student, 
    special_instructor, college_student, school_user
  </sql>
  <select id="selectByExample" parameterType="com.liwj.asem.model.FlowTemplateExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from flow_template
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from flow_template
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from flow_template
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.liwj.asem.model.FlowTemplateExample">
    delete from flow_template
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.liwj.asem.model.FlowTemplate">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into flow_template (name, flow_type, create_user_id, 
      create_date, modify_user_id, modify_date, 
      version, primary_teaching_institution_id, need_grade_check, 
      grade_instructor, grade_student, special_instructor, 
      college_student, school_user)
    values (#{name,jdbcType=VARCHAR}, #{flowType,jdbcType=INTEGER}, #{createUserId,jdbcType=BIGINT}, 
      #{createDate,jdbcType=TIMESTAMP}, #{modifyUserId,jdbcType=BIGINT}, #{modifyDate,jdbcType=TIMESTAMP}, 
      #{version,jdbcType=INTEGER}, #{primaryTeachingInstitutionId,jdbcType=BIGINT}, #{needGradeCheck,jdbcType=BIT}, 
      #{gradeInstructor,jdbcType=BIT}, #{gradeStudent,jdbcType=BIT}, #{specialInstructor,jdbcType=BIT}, 
      #{collegeStudent,jdbcType=BIT}, #{schoolUser,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="com.liwj.asem.model.FlowTemplate">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into flow_template
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="flowType != null">
        flow_type,
      </if>
      <if test="createUserId != null">
        create_user_id,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="modifyUserId != null">
        modify_user_id,
      </if>
      <if test="modifyDate != null">
        modify_date,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="primaryTeachingInstitutionId != null">
        primary_teaching_institution_id,
      </if>
      <if test="needGradeCheck != null">
        need_grade_check,
      </if>
      <if test="gradeInstructor != null">
        grade_instructor,
      </if>
      <if test="gradeStudent != null">
        grade_student,
      </if>
      <if test="specialInstructor != null">
        special_instructor,
      </if>
      <if test="collegeStudent != null">
        college_student,
      </if>
      <if test="schoolUser != null">
        school_user,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="flowType != null">
        #{flowType,jdbcType=INTEGER},
      </if>
      <if test="createUserId != null">
        #{createUserId,jdbcType=BIGINT},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyUserId != null">
        #{modifyUserId,jdbcType=BIGINT},
      </if>
      <if test="modifyDate != null">
        #{modifyDate,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null">
        #{version,jdbcType=INTEGER},
      </if>
      <if test="primaryTeachingInstitutionId != null">
        #{primaryTeachingInstitutionId,jdbcType=BIGINT},
      </if>
      <if test="needGradeCheck != null">
        #{needGradeCheck,jdbcType=BIT},
      </if>
      <if test="gradeInstructor != null">
        #{gradeInstructor,jdbcType=BIT},
      </if>
      <if test="gradeStudent != null">
        #{gradeStudent,jdbcType=BIT},
      </if>
      <if test="specialInstructor != null">
        #{specialInstructor,jdbcType=BIT},
      </if>
      <if test="collegeStudent != null">
        #{collegeStudent,jdbcType=BIT},
      </if>
      <if test="schoolUser != null">
        #{schoolUser,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.liwj.asem.model.FlowTemplateExample" resultType="java.lang.Long">
    select count(*) from flow_template
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update flow_template
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.flowType != null">
        flow_type = #{record.flowType,jdbcType=INTEGER},
      </if>
      <if test="record.createUserId != null">
        create_user_id = #{record.createUserId,jdbcType=BIGINT},
      </if>
      <if test="record.createDate != null">
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.modifyUserId != null">
        modify_user_id = #{record.modifyUserId,jdbcType=BIGINT},
      </if>
      <if test="record.modifyDate != null">
        modify_date = #{record.modifyDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=INTEGER},
      </if>
      <if test="record.primaryTeachingInstitutionId != null">
        primary_teaching_institution_id = #{record.primaryTeachingInstitutionId,jdbcType=BIGINT},
      </if>
      <if test="record.needGradeCheck != null">
        need_grade_check = #{record.needGradeCheck,jdbcType=BIT},
      </if>
      <if test="record.gradeInstructor != null">
        grade_instructor = #{record.gradeInstructor,jdbcType=BIT},
      </if>
      <if test="record.gradeStudent != null">
        grade_student = #{record.gradeStudent,jdbcType=BIT},
      </if>
      <if test="record.specialInstructor != null">
        special_instructor = #{record.specialInstructor,jdbcType=BIT},
      </if>
      <if test="record.collegeStudent != null">
        college_student = #{record.collegeStudent,jdbcType=BIT},
      </if>
      <if test="record.schoolUser != null">
        school_user = #{record.schoolUser,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update flow_template
    set id = #{record.id,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      flow_type = #{record.flowType,jdbcType=INTEGER},
      create_user_id = #{record.createUserId,jdbcType=BIGINT},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      modify_user_id = #{record.modifyUserId,jdbcType=BIGINT},
      modify_date = #{record.modifyDate,jdbcType=TIMESTAMP},
      version = #{record.version,jdbcType=INTEGER},
      primary_teaching_institution_id = #{record.primaryTeachingInstitutionId,jdbcType=BIGINT},
      need_grade_check = #{record.needGradeCheck,jdbcType=BIT},
      grade_instructor = #{record.gradeInstructor,jdbcType=BIT},
      grade_student = #{record.gradeStudent,jdbcType=BIT},
      special_instructor = #{record.specialInstructor,jdbcType=BIT},
      college_student = #{record.collegeStudent,jdbcType=BIT},
      school_user = #{record.schoolUser,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.liwj.asem.model.FlowTemplate">
    update flow_template
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="flowType != null">
        flow_type = #{flowType,jdbcType=INTEGER},
      </if>
      <if test="createUserId != null">
        create_user_id = #{createUserId,jdbcType=BIGINT},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyUserId != null">
        modify_user_id = #{modifyUserId,jdbcType=BIGINT},
      </if>
      <if test="modifyDate != null">
        modify_date = #{modifyDate,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="primaryTeachingInstitutionId != null">
        primary_teaching_institution_id = #{primaryTeachingInstitutionId,jdbcType=BIGINT},
      </if>
      <if test="needGradeCheck != null">
        need_grade_check = #{needGradeCheck,jdbcType=BIT},
      </if>
      <if test="gradeInstructor != null">
        grade_instructor = #{gradeInstructor,jdbcType=BIT},
      </if>
      <if test="gradeStudent != null">
        grade_student = #{gradeStudent,jdbcType=BIT},
      </if>
      <if test="specialInstructor != null">
        special_instructor = #{specialInstructor,jdbcType=BIT},
      </if>
      <if test="collegeStudent != null">
        college_student = #{collegeStudent,jdbcType=BIT},
      </if>
      <if test="schoolUser != null">
        school_user = #{schoolUser,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.liwj.asem.model.FlowTemplate">
    update flow_template
    set name = #{name,jdbcType=VARCHAR},
      flow_type = #{flowType,jdbcType=INTEGER},
      create_user_id = #{createUserId,jdbcType=BIGINT},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      modify_user_id = #{modifyUserId,jdbcType=BIGINT},
      modify_date = #{modifyDate,jdbcType=TIMESTAMP},
      version = #{version,jdbcType=INTEGER},
      primary_teaching_institution_id = #{primaryTeachingInstitutionId,jdbcType=BIGINT},
      need_grade_check = #{needGradeCheck,jdbcType=BIT},
      grade_instructor = #{gradeInstructor,jdbcType=BIT},
      grade_student = #{gradeStudent,jdbcType=BIT},
      special_instructor = #{specialInstructor,jdbcType=BIT},
      college_student = #{collegeStudent,jdbcType=BIT},
      school_user = #{schoolUser,jdbcType=BIT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>